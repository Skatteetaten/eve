#!/usr/bin/env groovy

def git
def go
def maven
def properties
def utilities
def iq

def overrides = [
    applicationType          : 'doozer',
    artifactId               : 'radish',
    groupId                  : 'no.skatteetaten.aurora.openshift',
    scriptVersion            : 'feature/AOS-5036-golang-nexus-iq-mattermost',
    pipelineScript           : 'https://git.aurora.skead.no/scm/ao/aurora-pipeline-scripts.git',
    iqOrganizationName       : 'Team AppSikk',
    goVersion                : '1.14',
    artifactPath             : 'bin/',
    sonarQube                : true,
    chatRoom                 : "#sitj-build",
    versionStrategy          : [
        [branch: 'master', versionHint: '2']
        ]
    ]

fileLoader.withGit(overrides.pipelineScript, overrides.scriptVersion) {
    git = fileLoader.load('git/git')
    go = fileLoader.load('go/go')
    maven = fileLoader.load('maven/maven')
    properties = fileLoader.load('utilities/properties')
    utilities = fileLoader.load('utilities/utilities')
    iq = fileLoader.load('nexus/iq')
  }

Map props = properties.getDefaultProps(overrides)

timestamps {
  node(props.slaveSelector) {
    try {
      stage('Checkout') {
        checkout scm
        //Get context
        if (props.sporing) {
          try {
            props.sporingscontext = sporing.createContext(props.sporingstjeneste)
          } catch(Exception e) {
            props.sporingscontext = null
            echo "[WARNING] Unable to initialize Sporingslogger " + e.message
          }
        }
      }

      stage('Prepare') {
          props.scriptVersionEffective = props.scriptVersion
          utilities.initProps(props, git)
        
          if(props.sporing && props.sporingscontext != null) {
            try {
              sporing.addGitMetadata(props.sporingstjeneste, props.sporingscontext, props.git)
            } catch (Exception e) {
              echo "[WARNING] Unable to add git metadata to Sporingslogger " + e.message
            }
          }
        }

        stage('Build and test') {
          if (props.goVersion) {
            go.buildGoWithJenkinsSh(props.goVersion)
          } else {
            error("You need to specify goVersion")
          }
        }

        stage('Sonar') {
          def sonarPath = tool 'Sonar 4'
          sh "${sonarPath}/bin/sonar-scanner -Dsonar.branch.name=${env.BRANCH_NAME}"
        }
       
        stage("Nexus IQ downstream") {
          iq.triggerDownstreamIQJob(props)
        }
       
        if (props.isReleaseBuild && !props.tagExists) {
          stage("Tag") {
            git.tagAndPush(props.credentialsId, "v$props.version")
          }
        }

        stage('Deploy to Nexus') {
          
          def REPO_ID = props.isReleaseBuild ? 'releases' : 'snapshots'
          def REPO_URL = 'https://nexus.sits.no/service/rest/repository/browse/aup-baseimages-artifacts/' + REPO_ID

          if (props.isReleaseBuild){
            if (!git.tagExists("v${props.version}")) {
              error "Commit is not tagged. Aborting build."
            }
          }

          def deployOpts = '-Durl=' + REPO_URL +
              ' -DrepositoryId=releases-nexus3' +
              ' -DgroupId=' + props.groupId +
              ' -DartifactId=' + props.artifactId +
              ' -Dversion=' + props.version +
              ' -Dpackaging=tar.gz -DgeneratePom=true -Dfile=bin/radish.tar.gz'

          // mvn wagon:upload-single -Dwagon.serverId=nexus -Dwagon.url=http://localhost:8081/repository/raw-hosted/ -Dwagon.fromFile=fileToUpload.txt
          
          maven.setMavenVersion('Maven 3')
          maven.run('deploy:deploy-file', deployOpts)
        
        }

        if(props.sporing && props.sporingscontext != null) {
          try {
            sporing.addNexusMetadata(props.sporingstjeneste, props.sporingscontext, props.nexus)
          } catch (Exception e) {
            echo "[WARNING] Unable to add Nexus metadata to Sporingslogger " + e.message
          }
        }

        if (props.github.enabled) {
          if (props.github.push) {
            stage('Push to GitHub') {
              git.withGitHubCredentials(props.github.credentialsId) {
                sh "git remote | grep github || git remote add github ${props.github.repoUrl}"
                sh "GIT_ASKPASS=true git push github HEAD:${env.BRANCH_NAME} --follow-tags"
              }
            }
           }
        }
      } catch (InterruptedException e) {
          currentBuild.result="ABORTED"
          throw e
      } catch (e) {
        currentBuild.result = "FAILURE"
        echo "Failure ${e.message}"
        throw e
      } finally {
        utilities.postActions(props)
      }
  }
}

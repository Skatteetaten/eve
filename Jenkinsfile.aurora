def overrides = [
    scriptVersion  : 'v7',
    pipelineScript: 'https://git.aurora.skead.no/scm/ao/aurora-pipeline-scripts.git',
    credentialsId: "github",
    checkstyle : false,
    jiraFiksetIKomponentversjon: true,
    chatRoom: "#sitj",
    iq: false,
    sonarQube: false,
    applicationType: "go",
    versionStrategy: [
      [ branch: 'master', versionHint: '1' ]
    ]
]

def git
def go
def properties
def maven

fileLoader.withGit(overrides.pipelineScript, overrides.scriptVersion) {
  git = fileLoader.load('git/git')
  go = fileLoader.load('go/go')
  maven = fileLoader.load('maven/maven')
  properties = fileLoader.load('utilities/properties')
}

Map props = properties.getDefaultProps(overrides)

node(props.slaveSelector) {
try {
  stage('Checkout') {
    checkout scm
  }

  stage('Build, Test & Coverage') {
    go.buildGoWithJenkinsShUsingGlobalTools("go-1.14")
  }

  stage('Deploy to Nexus'){
    def isMaster = env.BRANCH_NAME == 'master'
    
    def REPO_ID = isMaster ? 'releases' : 'snapshots'
    def REPO_URL = 'https://aurora/nexus/content/repositories/' + REPO_ID
    
    def version = git.getTagFromCommit()

    if (isMaster){
      if (!git.tagExists("v${version}")) {
        error "Commit is not tagged. Aborting build."
      }
    }

    def deployOpts = '-Durl=' + REPO_URL + 
        ' -DrepositoryId=' + REPO_ID +
        ' -DgroupId=no.skatteetaten.aurora.openshift -DartifactId=radish -Dversion=' + version +
        ' -Dpackaging=tar.gz -DgeneratePom=true -Dfile=bin/radish.tar.gz'

    maven.setMavenVersion('Maven 3')
    maven.run('deploy:deploy-file', deployOpts)

  }
 } catch (InterruptedException e) {
      currentBuild.result="ABORTED"
      throw e
  } catch (e) {
    currentBuild.result = "FAILURE"
    echo "Failure ${e.message}"
    throw e
  } finally {
    utilities.postActions(props)
  }
}

// Code generated by fileb0x at "2019-03-18 14:48:09.339182098 +0100 CET m=+0.003835854" from config file "b0x.yaml" DO NOT EDIT.
// modification hash(ba49fb6e39277095b2677f8e7933f0a2.d8af1b5fbe59f9b07b62f83b4165786f)

package resources

import (
	"bytes"

	"context"
	"io"
	"net/http"
	"os"
	"path"

	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct {
	// Prefix allows to limit the path of all requests. F.e. a prefix "css" would allow only calls to /css/*
	Prefix string
}

// FileResourcesDefaultStanzasTemplate is "resources/default_stanzas_template"
var FileResourcesDefaultStanzasTemplate = []byte("\x23\x20\x2d\x2d\x2d\x20\x73\x74\x61\x72\x74\x2f\x73\x74\x61\x6e\x7a\x61\x20\x53\x54\x44\x4f\x55\x54\x0a\x5b\x6d\x6f\x6e\x69\x74\x6f\x72\x3a\x2f\x2f\x2e\x2f\x6c\x6f\x67\x73\x2f\x2a\x2e\x6c\x6f\x67\x5d\x0a\x64\x69\x73\x61\x62\x6c\x65\x64\x20\x3d\x20\x66\x61\x6c\x73\x65\x0a\x66\x6f\x6c\x6c\x6f\x77\x54\x61\x69\x6c\x20\x3d\x20\x30\x0a\x73\x6f\x75\x72\x63\x65\x74\x79\x70\x65\x20\x3d\x20\x6c\x6f\x67\x34\x6a\x0a\x69\x6e\x64\x65\x78\x20\x3d\x20\x7b\x7b\x2e\x53\x70\x6c\x75\x6e\x6b\x49\x6e\x64\x65\x78\x7d\x7d\x0a\x5f\x6d\x65\x74\x61\x20\x3d\x20\x65\x6e\x76\x69\x72\x6f\x6e\x6d\x65\x6e\x74\x3a\x3a\x7b\x7b\x2e\x50\x6f\x64\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x7d\x7d\x20\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x3a\x3a\x7b\x7b\x2e\x41\x70\x70\x4e\x61\x6d\x65\x7d\x7d\x20\x6e\x6f\x64\x65\x74\x79\x70\x65\x3a\x3a\x6f\x70\x65\x6e\x73\x68\x69\x66\x74\x0a\x68\x6f\x73\x74\x20\x3d\x20\x7b\x7b\x2e\x48\x6f\x73\x74\x4e\x61\x6d\x65\x7d\x7d\x0a\x23\x20\x2d\x2d\x2d\x20\x65\x6e\x64\x2f\x73\x74\x61\x6e\x7a\x61\x0a\x0a\x23\x20\x2d\x2d\x2d\x20\x73\x74\x61\x72\x74\x2f\x73\x74\x61\x6e\x7a\x61\x20\x41\x55\x44\x49\x54\x0a\x5b\x6d\x6f\x6e\x69\x74\x6f\x72\x3a\x2f\x2f\x2e\x2f\x6c\x6f\x67\x73\x2f\x2a\x2e\x61\x75\x64\x69\x74\x2e\x6a\x73\x6f\x6e\x5d\x0a\x64\x69\x73\x61\x62\x6c\x65\x64\x20\x3d\x20\x66\x61\x6c\x73\x65\x0a\x66\x6f\x6c\x6c\x6f\x77\x54\x61\x69\x6c\x20\x3d\x20\x30\x0a\x73\x6f\x75\x72\x63\x65\x74\x79\x70\x65\x20\x3d\x20\x5f\x6a\x73\x6f\x6e\x0a\x69\x6e\x64\x65\x78\x20\x3d\x20\x24\x53\x50\x4c\x55\x4e\x4b\x5f\x41\x55\x44\x49\x54\x5f\x49\x4e\x44\x45\x58\x0a\x5f\x6d\x65\x74\x61\x20\x3d\x20\x65\x6e\x76\x69\x72\x6f\x6e\x6d\x65\x6e\x74\x3a\x3a\x7b\x7b\x2e\x50\x6f\x64\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x7d\x7d\x20\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x3a\x3a\x7b\x7b\x2e\x41\x70\x70\x4e\x61\x6d\x65\x7d\x7d\x20\x6e\x6f\x64\x65\x74\x79\x70\x65\x3a\x3a\x6f\x70\x65\x6e\x73\x68\x69\x66\x74\x20\x6c\x6f\x67\x74\x79\x70\x65\x3a\x3a\x61\x75\x64\x69\x74\x0a\x68\x6f\x73\x74\x20\x3d\x20\x24\x48\x4f\x53\x54\x4e\x41\x4d\x45\x0a\x23\x20\x2d\x2d\x2d\x20\x65\x6e\x64\x2f\x73\x74\x61\x6e\x7a\x61\x0a\x0a\x23\x20\x2d\x2d\x2d\x20\x73\x74\x61\x72\x74\x2f\x73\x74\x61\x6e\x7a\x61\x20\x41\x43\x43\x45\x53\x53\x5f\x4c\x4f\x47\x0a\x5b\x6d\x6f\x6e\x69\x74\x6f\x72\x3a\x2f\x2f\x2e\x2f\x6c\x6f\x67\x73\x2f\x2a\x2e\x61\x63\x63\x65\x73\x73\x5d\x0a\x64\x69\x73\x61\x62\x6c\x65\x64\x20\x3d\x20\x66\x61\x6c\x73\x65\x0a\x66\x6f\x6c\x6c\x6f\x77\x54\x61\x69\x6c\x20\x3d\x20\x30\x0a\x73\x6f\x75\x72\x63\x65\x74\x79\x70\x65\x20\x3d\x20\x61\x63\x63\x65\x73\x73\x5f\x63\x6f\x6d\x62\x69\x6e\x65\x64\x0a\x69\x6e\x64\x65\x78\x20\x3d\x20\x7b\x7b\x2e\x53\x70\x6c\x75\x6e\x6b\x49\x6e\x64\x65\x78\x7d\x7d\x0a\x5f\x6d\x65\x74\x61\x20\x3d\x20\x65\x6e\x76\x69\x72\x6f\x6e\x6d\x65\x6e\x74\x3a\x3a\x7b\x7b\x2e\x50\x6f\x64\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x7d\x7d\x20\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x3a\x3a\x7b\x7b\x2e\x41\x70\x70\x4e\x61\x6d\x65\x7d\x7d\x20\x6e\x6f\x64\x65\x74\x79\x70\x65\x3a\x3a\x6f\x70\x65\x6e\x73\x68\x69\x66\x74\x0a\x68\x6f\x73\x74\x20\x3d\x20\x7b\x7b\x2e\x48\x6f\x73\x74\x4e\x61\x6d\x65\x7d\x7d\x0a\x23\x20\x2d\x2d\x2d\x20\x65\x6e\x64\x2f\x73\x74\x61\x6e\x7a\x61\x0a\x0a\x23\x20\x2d\x2d\x2d\x20\x73\x74\x61\x72\x74\x2f\x73\x74\x61\x6e\x7a\x61\x20\x47\x43\x20\x4c\x4f\x47\x0a\x5b\x6d\x6f\x6e\x69\x74\x6f\x72\x3a\x2f\x2f\x2e\x2f\x6c\x6f\x67\x73\x2f\x2a\x2e\x67\x63\x5d\x0a\x64\x69\x73\x61\x62\x6c\x65\x64\x20\x3d\x20\x66\x61\x6c\x73\x65\x0a\x66\x6f\x6c\x6c\x6f\x77\x54\x61\x69\x6c\x20\x3d\x20\x30\x0a\x73\x6f\x75\x72\x63\x65\x74\x79\x70\x65\x20\x3d\x20\x67\x63\x5f\x6c\x6f\x67\x0a\x69\x6e\x64\x65\x78\x20\x3d\x20\x7b\x7b\x2e\x53\x70\x6c\x75\x6e\x6b\x49\x6e\x64\x65\x78\x7d\x7d\x0a\x5f\x6d\x65\x74\x61\x20\x3d\x20\x65\x6e\x76\x69\x72\x6f\x6e\x6d\x65\x6e\x74\x3a\x3a\x7b\x7b\x2e\x50\x6f\x64\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x7d\x7d\x20\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x3a\x3a\x7b\x7b\x2e\x41\x70\x70\x4e\x61\x6d\x65\x7d\x7d\x20\x6e\x6f\x64\x65\x74\x79\x70\x65\x3a\x3a\x6f\x70\x65\x6e\x73\x68\x69\x66\x74\x0a\x68\x6f\x73\x74\x20\x3d\x20\x7b\x7b\x2e\x48\x6f\x73\x74\x4e\x61\x6d\x65\x7d\x7d\x0a\x23\x20\x2d\x2d\x2d\x20\x65\x6e\x64\x2f\x73\x74\x61\x6e\x7a\x61")

func init() {
	err := CTX.Err()
	if err != nil {
		panic(err)
	}

	err = FS.Mkdir(CTX, "resources/", 0777)
	if err != nil && err != os.ErrExist {
		panic(err)
	}

	var f webdav.File

	f, err = FS.OpenFile(CTX, "resources/default_stanzas_template", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = f.Write(FileResourcesDefaultStanzasTemplate)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {
	path = hfs.Prefix + path

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}

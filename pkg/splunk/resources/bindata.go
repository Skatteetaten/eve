// Code generated by go-bindata.
// sources:
// resources/default_stanzas_template
// DO NOT EDIT!

package splunk

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesDefault_stanzas_template = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\xd2\xcf\x4a\xc3\x40\x10\x06\xf0\xfb\x3e\xc5\x80\x3d\x09\x4d\x3c\x78\x0a\xe4\x50\xda\xd2\x16\x6b\x5a\x48\x0a\x82\x48\xd8\xee\x4e\xd3\xad\x9b\x9d\x25\xbb\xf5\x5f\xc8\xbb\x4b\x12\xf5\x54\xc1\x1e\x04\xbd\xce\x64\xf8\xf2\xfd\xd8\x0b\x18\x0e\x87\xe0\x3c\xaf\x7c\xe8\x3c\x37\x6f\x1c\xd2\x6c\xb2\xda\x64\xec\xbe\x24\xa3\x3c\x55\x51\x18\x06\xa1\xa6\xc2\x85\x97\x81\xa6\xe2\x81\x49\xe5\xf8\x56\xa3\x84\x18\x76\x5c\x3b\x64\x3b\xd2\x9a\x9e\x33\xae\x34\xc4\x70\xc5\x1c\x1d\x2b\x81\xfe\xd5\x22\xc4\xa0\xa9\xb8\x3e\x30\x65\x24\xbe\x40\x0c\x75\x1d\xa4\x56\x1f\xcd\xe3\xa2\x1d\x34\x0d\xcb\x4b\xf4\x1c\x62\x40\xf3\xa4\x2a\x32\x25\x1a\x1f\x45\x75\x1d\xac\x49\x26\xbc\x44\x67\xb9\xc0\xa6\x01\x6e\xad\x56\x82\x7b\x45\xa6\x5b\x8f\xac\x6d\xd7\x4d\x03\x86\x64\x17\x15\x45\x64\xd1\xb8\xbd\xda\x79\xb6\x27\xe7\xfb\xb0\x39\x39\xdf\x7f\xc8\xfa\xa2\x68\xe4\x47\x4d\xc6\x4e\x54\x1f\x6d\x26\x8b\xd3\xcd\xf9\x51\x2a\x1f\x1c\x1c\x99\x33\x01\xf2\xf6\xe6\x0b\x60\x90\xae\x97\x9b\xe4\x26\xef\x82\xf2\x45\x32\x99\xde\xfd\x8a\x41\xeb\xde\x8f\xba\x1f\xff\x24\x19\xcc\x57\x69\x96\x8c\x6e\xa7\x3f\xe4\x18\x8f\xa7\x69\x9a\x2f\x57\xb3\xd3\x26\x42\xa0\x73\x67\x7a\xf4\x47\xb9\xa0\x72\xab\x0c\xca\x7f\xf3\x34\x66\x63\xf8\xce\xa1\x10\x67\x1a\x14\x22\xd7\x54\xfc\xc5\xea\xef\x01\x00\x00\xff\xff\xbd\x65\x4c\x60\x0f\x04\x00\x00")

func resourcesDefault_stanzas_templateBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefault_stanzas_template,
		"resources/default_stanzas_template",
	)
}

func resourcesDefault_stanzas_template() (*asset, error) {
	bytes, err := resourcesDefault_stanzas_templateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/default_stanzas_template", size: 1039, mode: os.FileMode(420), modTime: time.Unix(1542285280, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/default_stanzas_template": resourcesDefault_stanzas_template,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"default_stanzas_template": &bintree{resourcesDefault_stanzas_template, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated by go-bindata.
// sources:
// resources/default_stanzas_template
// DO NOT EDIT!

package splunk

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesDefault_stanzas_template = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x92\xcd\x6a\xeb\x30\x10\x85\xf7\x7a\x0a\xc3\xcd\xea\x42\xec\x2e\xba\x32\x74\x11\x92\x90\x84\xa6\x4e\xc0\x0e\x14\x4a\x11\x8a\x34\x49\x94\xca\x33\xc2\x52\xfa\x17\xfc\xee\x95\xed\xb6\xab\x14\x9a\x45\xa1\xdd\xd8\x9a\x39\x73\x18\x9d\x0f\xfd\x8b\xfa\xfd\x7e\xe4\xbc\xa8\x7c\x12\xbe\xf8\x2a\xa2\xbc\x18\x2d\x56\x05\xbb\x2b\x09\xb5\xa7\x2a\x4d\x92\x38\x31\xb4\x75\xc9\xff\x38\xfc\xee\x99\xd2\x4e\xac\x0d\xa8\xe8\x2a\xda\x08\xe3\x80\x6d\xc8\x18\x7a\x2a\x84\x36\xa1\x75\xc1\x1c\x1d\x2a\x09\xfe\xc5\x42\x28\x83\xe3\x72\xcf\x34\x2a\x78\x0e\xd5\xf1\x18\xe7\xd6\x1c\xf0\x61\xd6\x34\xea\x9a\xf1\x12\xbc\x08\x02\xe0\xa3\xae\x08\x4b\x40\x9f\xa6\x61\x6a\x49\x2a\x13\x25\x38\x2b\x24\xd4\x75\x24\xac\x35\x5a\x0a\xaf\x09\x5b\x79\x60\x6d\x23\x07\x05\x49\xb5\xab\xd2\x94\x2c\xa0\xdb\xe9\x8d\x67\x3b\x72\xbe\x5b\x36\x0d\xa7\x6e\x90\x75\x41\x01\xd5\x7b\x4c\xc6\x4e\x44\x1f\xac\x46\xb3\xd3\xc9\xc5\x41\x69\x1f\xef\x1d\xe1\x99\x00\x78\xe3\xf9\x04\xd0\xcb\x97\xf3\x55\x76\xcd\xdb\x45\x7c\x96\x8d\xc6\xb7\x3f\xc2\xa0\xe1\xde\xb5\xda\x8b\x7f\x20\xe9\x4d\x17\x79\x91\x0d\x6e\xc6\xdf\xc4\x31\x1c\x8e\xf3\x9c\xcf\x17\x93\xd3\x4c\xa4\x04\xe7\xce\xe4\xd1\x99\xb8\xa4\x72\xad\x11\xd4\x9f\x79\x1a\x93\x61\xf4\x15\x87\xad\x3c\x93\xc1\x56\xf2\x60\xfd\x8d\xd1\xdf\x02\x00\x00\xff\xff\xbd\x65\x4c\x60\x0f\x04\x00\x00")

func resourcesDefault_stanzas_templateBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefault_stanzas_template,
		"resources/default_stanzas_template",
	)
}

func resourcesDefault_stanzas_template() (*asset, error) {
	bytes, err := resourcesDefault_stanzas_templateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/default_stanzas_template", size: 1039, mode: os.FileMode(420), modTime: time.Unix(1542285280, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/default_stanzas_template": resourcesDefault_stanzas_template,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"default_stanzas_template": &bintree{resourcesDefault_stanzas_template, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

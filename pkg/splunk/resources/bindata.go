// Code generated by go-bindata.
// sources:
// resources/bindata.go
// resources/default_stanzas_template
// DO NOT EDIT!

package splunk

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesBindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func resourcesBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_resourcesBindataGo,
		"resources/bindata.go",
	)
}

func resourcesBindataGo() (*asset, error) {
	bytes, err := resourcesBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1530703226, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesDefault_stanzas_template = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x90\x4f\x4b\xc3\x40\x10\xc5\xef\xfb\x29\x06\xbc\x09\x4d\x3c\x78\x0a\xe4\x50\xaa\x54\x41\xac\x90\x7a\x12\x09\xd3\xdd\x49\xba\xba\x99\x59\x32\x5b\xff\x85\x7c\x77\x69\xe3\xb1\x1e\x7a\xd3\xeb\xbc\x79\x3c\x7e\xbf\x33\x98\xcd\x66\xa0\x09\xfb\x94\x6b\x42\xfe\x42\xa8\xd6\x57\xab\xc7\xb5\x79\xea\x84\x7d\x92\xbe\xc8\xf3\x2c\x0f\xd2\x6a\x7e\x9e\x05\x69\x9f\x8d\xf3\x8a\x9b\x40\x0e\x4a\x68\x30\x28\x99\x46\x42\x90\xf7\x35\xfa\x00\x25\x5c\x18\x95\x5d\x6f\x29\x7d\x46\x82\x12\x82\xb4\x97\x2f\xc6\xb3\xa3\x0f\x28\x61\x18\xb2\x2a\x86\x1d\xbf\xde\xee\x0f\xe3\x68\xea\x8e\x12\x42\x09\xc4\x6f\xbe\x17\xee\x88\x53\x51\x0c\x43\xf6\x20\xee\x1e\x3b\xd2\x88\x96\xc6\x11\x30\xc6\xe0\x2d\x26\x2f\x7c\x88\xe7\x31\xee\xe3\x71\x04\x16\x77\x98\x2a\x0a\x89\xc4\xba\xf5\x4d\x32\x5b\xd1\x34\x8d\xdd\x88\xa6\xe9\xd1\x4c\xa0\xc4\xee\x07\xd3\x98\x23\xe8\xf3\xc5\xe2\xba\xaa\xea\xbb\xd5\xf2\x28\x3e\x5a\x4b\xaa\x27\x1a\x98\x4a\xb5\x95\x6e\xe3\x99\xdc\xbf\x71\xb1\x5c\xc0\x6f\x1e\x5a\x7b\xa2\x83\xd6\xd6\x41\xda\xbf\x88\xfe\x1d\x00\x00\xff\xff\xda\x9a\xcd\x2c\x00\x03\x00\x00")

func resourcesDefault_stanzas_templateBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefault_stanzas_template,
		"resources/default_stanzas_template",
	)
}

func resourcesDefault_stanzas_template() (*asset, error) {
	bytes, err := resourcesDefault_stanzas_templateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/default_stanzas_template", size: 768, mode: os.FileMode(420), modTime: time.Unix(1530694711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/bindata.go":               resourcesBindataGo,
	"resources/default_stanzas_template": resourcesDefault_stanzas_template,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"bindata.go":               &bintree{resourcesBindataGo, map[string]*bintree{}},
		"default_stanzas_template": &bintree{resourcesDefault_stanzas_template, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

package splunk

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func resources_default_stanzas_template() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xd4, 0x90,
		0x3f, 0x4f, 0xf3, 0x30, 0x10, 0xc6, 0x77, 0x7f, 0x0a, 0x4b, 0xef, 0xf6,
		0x4a, 0x49, 0x18, 0x98, 0x22, 0x31, 0x54, 0x01, 0x15, 0x24, 0x44, 0x91,
		0x12, 0x26, 0x84, 0xa2, 0xab, 0x7d, 0x49, 0x0d, 0xce, 0x9d, 0x15, 0xbb,
		0xfc, 0xab, 0xf2, 0xdd, 0xb9, 0x36, 0x8c, 0x65, 0xe8, 0x06, 0x8b, 0x7d,
		0x77, 0xcf, 0x3d, 0x3a, 0xfd, 0x9e, 0x7f, 0x3a, 0xcb, 0x32, 0x1d, 0x13,
		0x8c, 0xa9, 0x90, 0x97, 0x3e, 0x41, 0xd7, 0xcd, 0xe5, 0xea, 0xa1, 0x51,
		0x8f, 0x03, 0x93, 0x4b, 0x3c, 0x96, 0x45, 0x91, 0x17, 0x9e, 0xfb, 0x58,
		0xfc, 0xcf, 0xe5, 0x7b, 0x52, 0xd6, 0x45, 0x58, 0x7b, 0xb4, 0xfa, 0x42,
		0x77, 0xe0, 0x23, 0xaa, 0x8e, 0xbd, 0xe7, 0xb7, 0x06, 0x9c, 0x97, 0xd1,
		0x99, 0x8a, 0xbc, 0x1d, 0x0d, 0xa6, 0x8f, 0x80, 0xd2, 0x8a, 0xe3, 0xfc,
		0x59, 0x39, 0xb2, 0xf8, 0x2e, 0xdd, 0x6e, 0x97, 0xd7, 0xc1, 0x6f, 0xe9,
		0xe5, 0x66, 0x3f, 0x98, 0x26, 0xd5, 0x0e, 0x98, 0x40, 0x04, 0xa4, 0x57,
		0x37, 0x32, 0x0d, 0x48, 0xa9, 0x2c, 0x65, 0xeb, 0x9e, 0xed, 0x1d, 0x0c,
		0x18, 0x03, 0x18, 0x9c, 0x26, 0x0d, 0x21, 0x78, 0x67, 0x20, 0x39, 0xa6,
		0x83, 0xbc, 0x08, 0x61, 0x2f, 0x8b, 0x42, 0x6c, 0x0f, 0xa7, 0xca, 0x92,
		0x03, 0x52, 0xdc, 0xb8, 0x2e, 0xa9, 0x0d, 0xc7, 0x34, 0x1f, 0xbb, 0x96,
		0x6a, 0x5e, 0x54, 0x33, 0x28, 0x92, 0xfd, 0xc6, 0x54, 0xea, 0x08, 0xfa,
		0xa2, 0xaa, 0xae, 0xea, 0xba, 0xbd, 0x5d, 0x2d, 0x8f, 0xe2, 0x83, 0x31,
		0x18, 0xe3, 0x89, 0x09, 0xcc, 0xa6, 0xd6, 0xf0, 0xb0, 0x76, 0x84, 0xf6,
		0xcf, 0x64, 0xb1, 0xac, 0xf4, 0x4f, 0x39, 0xf4, 0xe6, 0xc4, 0x0c, 0x7a,
		0xd3, 0x8a, 0xf5, 0x37, 0xa2, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xda,
		0x9a, 0xcd, 0x2c, 0x00, 0x03, 0x00, 0x00,
		},
		"resources/default_stanzas_template",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"resources/default_stanzas_template": resources_default_stanzas_template,

}
